#+TITLE: Chapter 7: Data Visualization

* Static 2D Plotting

** 1D Data Sets

  #+begin_src python
import numpy as np
np.random.seed(8888)
import matplotlib as mpl
import matplotlib.pyplot as plt
plt.style.use('seaborn')
mpl.rcParams['font.family'] = 'serif'

# 1D Data
y = np.random.standard_normal(20)
x = np.arange(len(y))
plt.plot(y)
plt.show()

# with a method
plt.plot(y.cumsum())
plt.show()

# with a little z00z
plt.plot(y.cumsum())
plt.grid(False)
plt.axis('equal')
plt.show()

# more
data = y.cumsum()
plt.plot(data)
plt.xlim(-1, 20)
plt.ylim(np.min(data) - 1,
         np.max(data) + 1)
plt.show()

# labels and whatnot
plt.figure(figsize=(10,6))
plt.plot(data, 'b', lw=1.5)
plt.plot(data, 'ro')
plt.xlabel('index')
plt.ylabel('value')
plt.title('A Simple Plot')
plt.show()
  #+end_src

** 2D Data Sets

   #+begin_src python
     y = np.random.standard_normal((20, 2)).cumsum(axis=0)

     plt.figure(figsize=(10, 6))
     plt.plot(y[:, 0], lw=1.5, label='1st')
     plt.plot(y[:, 1], lw=1.5, label='2nd')
     plt.plot(y, 'ro')
     plt.legend(loc=0)
     plt.xlabel('index')
     plt.ylabel('value')
     plt.title('A Simple Plot')
     plt.show()

     # subplots
     plt.figure(figsize=(10, 6))
     plt.subplot(211)
     plt.plot(y[:, 0], lw=1.5, label='1st')
     plt.plot(y[:, 0], 'ro')
     plt.legend(loc=0)
     plt.ylabel('value')
     plt.title('A Simple Plot')
     plt.subplot(212)
     plt.plot(y[:, 1], 'g', lw=1.5, label='2nd')
     plt.plot(y[:, 1], 'ro')
     plt.legend(loc=0)
     plt.xlabel('index')
     plt.ylabel('value')
     plt.show()

     # subplots with line and bar chart
     plt.figure(figsize=(10, 6))
     plt.subplot(121)
     plt.plot(y[:, 0], lw=1.5, label='1st')
     plt.plot(y[:, 0], 'ro')
     plt.legend(loc=0)
     plt.xlabel('Index')
     plt.ylabel('Value')
     plt.title('1st Data Set')
     plt.subplot(122)
     plt.bar(np.arange(len(y)), y[:, 1], width=0.5, color='g', label='2nd')
     plt.legend(loc=0)
     plt.xlabel('Index')
     plt.title('2nd Data Set')
     plt.show()

   #+end_src

** Other Plot Styles

   #+begin_src python
     # scatter plots
     y = np.random.standard_normal((1000, 2))

     plt.figure(figsize=(10, 6))
     plt.plot(y[:, 0], y[:, 1], 'ro')
     plt.xlabel('1st')
     plt.ylabel('2nd')
     plt.title('Scatter Plot')
     plt.show()

     # again with matplotlib
     plt.figure(figsize=(10, 6))
     plt.scatter(y[:, 0], y[:, 1], marker='o')
     plt.xlabel('1st')
     plt.ylabel('2nd')
     plt.title('Scatter Plot')
     plt.show()

     # scatter plot with colors
     c = np.random.randint(0, 10, len(y))

     plt.figure(figsize=(10, 6))
     plt.scatter(y[:, 0], y[:, 1],
                 c=c,
                 cmap='coolwarm',
                 marker='o')
     plt.colorbar()
     plt.xlabel('1st')
     plt.ylabel('2nd')
     plt.title('Scatter Plot')
     plt.show()

     # histogram
     plt.figure(figsize=(10, 6))
     plt.hist(y, label=['1st', '2nd'], bins=25)
     plt.legend(loc=0)
     plt.xlabel('value')
     plt.ylabel('frequency')
     plt.title('Histogram')
     plt.show()

     plt.figure(figsize=(10, 6))
     plt.hist(y, label=['1st', '2nd'],
              color=['b', 'g'],
              stacked=True,
              bins=20,
              alpha=0.5)
     plt.legend(loc=0)
     plt.xlabel('value')
     plt.ylabel('frequency')
     plt.title('Histogram')
     plt.show()

     # boxplot
     fig, ax = plt.subplots(figsize=(10,6))
     plt.boxplot(y)
     plt.setp(ax, xticklabels=['1st', '2nd'])
     plt.xlabel('data set')
     plt.ylabel('value')
     plt.title('Boxplot')
     plt.show()

     # integral
     def func(x):
         return 0.5 * np.exp(x) + 1

     a, b = 0.5, 1.5
     x = np.linspace(0, 2)
     y = func(x)
     Ix = np.linspace(a, b)
     Iy = func(Ix)
     verts = [(a, 0)] + list(zip(Ix, Iy)) + [(b, 0)]

     from matplotlib.patches import Polygon
     fig, ax = plt.subplots(figsize=(10, 6))
     plt.plot(x, y, 'b', linewidth=2)
     plt.ylim(bottom=0)
     poly = Polygon(verts, facecolor='0.7', edgecolor='0.5')
     ax.add_patch(poly)
     plt.text(0.5 * (a + b), 1, r'$\int_a^b f(x)\mathrm{d}x$',
              horizontalalignment='center', fontsize=20)
     plt.figtext(0.9, 0.075, '$x$')
     plt.figtext(0.075, 0.9, '$f(x)$')
     ax.set_xticks((a, b))
     ax.set_xticklabels(('$a$', '$b$'))
     ax.set_yticks((func(a), func(b)))
     ax.set_yticklabels(('$f(a)$', '$f(b)$'))
     plt.show()


   #+end_src

* Static 3D Plotting

One application in which finance can benefit from visualization in 3D is in showing volatility surfaces. These show implied volatilities simultaneously for a number of times-to-maturity and strikes of the traded options used.

Consider the parameters:
- Strike values between 50 and 100
- Times-to-Maturity between 0.5 and 2.5 years


  #+begin_src python
    import numpy as np
    from mpl_toolkits.mplot3d import Axes3D

    # generate a 2D coord system of data
    strike = np.linspace(50, 150, 24)
    ttm = np.linspace(0.5, 2.5, 24)
    strike, ttm = np.meshgrid(strike, ttm)

    strike[:2].round(1)

    iv = (strike - 100) ** 2 / (100 * strike) / ttm
    iv[:5, :3]

    # plot it
    fig = plt.figure(figsize=(10, 6))
    ax = fig.gca(projection='3d')
    surf = ax.plot_surface(strike, ttm, iv, rstride=2, cstride=2,
                           cmap=plt.cm.coolwarm, linewidth=0.5,
                           antialiased=True)
    ax.set_xlabel('strike')
    ax.set_ylabel('time to maturity')
    ax.set_zlabel('implied volatility')
    fig.colorbar(surf, shrink=0.5, aspect=5)
    plt.show()

    # replacing the style with points
    fig = plt.figure(figsize=(10, 6))
    ax = fig.add_subplot(111, projection='3d')
    ax.view_init(30, 60)
    ax.scatter(strike, ttm, iv, zdir='z', s=25, c='b', marker='^')
    ax.set_xlabel('strike')
    ax.set_ylabel('time to maturity')
    ax.set_zlabel('implied volatility')
    plt.show()

  #+end_src

* Interactive 2D Plotting

  #+begin_src python
    import pandas as pd
    import cufflinks as cf
    import plotly.offline as plyo

    plyo.init_notebook_mode(connected=True)

    # generate data
    a = np.random.standard_normal((250, 5)).cumsum(axis=0)

    index = pd.date_range('2019-1-1',
                          freq='B',
                          periods=len(a))

    df = pd.DataFrame(100 + 5 * a,
                      columns=list('abcde'),
                      index=index)

    df.head()

    plyo.plot(df[['a', 'b']].iplot(asFigure=True,
                       theme='polar',
                       title='A Time Series Plot',
                       xTitle='date',
                       yTitle='value',
                       mode={'a': 'markers', 'b': 'lines'},
                       size=3.5,
                       colors={'a': 'blue', 'b': 'magenta'}))

    # other plot styles
    plyo.plot(df.iplot(kind='hist',
                       subplots=True,
                       bins=15,
                       asFigure=True))

  #+end_src

* Financial Plots

The combination of plotly, cufflinks, and pandas proves useful when working with financial time series data.

#+begin_src python
  raw = pd.read_csv('data/fxcm_eur_usd_eod_data.csv',
                    index_col=0, parse_dates=True)


  quotes = raw[['OpenAsk', 'HighAsk', 'LowAsk', 'CloseAsk']]
  quotes = quotes.iloc[-60:]
  quotes.tail()

  qf = cf.QuantFig(quotes,
                   title='EUR/USD Exchange Rate',
                   legend='top',
                   name='EUR/USD')

  # Add bollinger bands
  qf.add_bollinger_bands(periods=15,
                         boll_std=2)

  # add RSI (Relative Strength Index) as a subplot
  qf.add_rsi(periods=14,
             showbands=False)

  plyo.plot(qf.iplot(asFigure=True))
#+end_src
