#+TITLE: Chapter 6: Object-Oriented Programming

#+begin_src python
class HumanBeing(object):
    def __init__(self, first_name, eye_color):
        self.first_name = first_name
        self.eye_color = eye_color
        self.position = 0

    def walk_steps(self, steps):
        self.position += steps


Sandra = HumanBeing(first_name='Sandra',
                    eye_color='Blue')

Sandra.first_name
Sandra.eye_color
Sandra.position
Sandra.walk_steps(100)
Sandra.position

## python data model
class Vector:
    def __init__(self, x=0, y=0, z=0):
        self.x = x
        self.y = y
        self.z = z

    def __repr__(self):
        return f'Vector({self.x}, {self.y}, {self.z})'

    def __abs__(self):
        return (self.x ** 2 + self.y ** 2 + self.z ** 2) ** 0.5

    def __bool__(self):
        return bool(abs(self))

    def __add__(self, other):
        x = self.x + other.x
        y = self.y + other.y
        z = self.z + other.z
        return Vector(x, y, z)

    def __mul__(self, scalar):
        return Vector(self.x * scalar,
                      self.y * scalar,
                      self.z * scalar)

    def __len__(self):
        return 3

    def __getitem__(self, i):
        if i in [0, -3]:
            return self.x
        elif i in [1, -2]:
            return self.y
        elif i in [2, -1]:
            return self.z
        else:
            raise IndexError('Index out of range')

    def __iter__(self):
        for i in range(len(self)):
            yield self[i]


v = Vector(1, 2, 3)

v

print(v)             # repr

abs(v)               # abs

bool(v)              # bool

v + Vector(1, 2, 3)  # addition

v * 2                # multiplication

len(v)               # len

v[0]                 # slicing

v[-2]                # slicing

for i in range(3):   # iter
    print(v[i])

for coordinate in v: # iter
    print(coordinate)

#+end_src
