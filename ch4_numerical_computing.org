#+TITLE: Chapter 4: Numerical Computing with NumPy

#+begin_src python

from array import array


v = [0.5, 0.75, 1.0, 1.5, 2.0]
m = [v, v, v]

# indexing
print(m[1])
print(m[1][0])

#+end_src

There is an array class as well. This behaves exactly as the vector does in R

#+begin_src python
import array

a = array.array('f', v)

#+end_src

* NumPy Arrays

numpy.ndarray is a class specialized to handle n-dimensional arrays

#+begin_src python
import numpy as np

a = np.array([0, 0.5, 1.0, 1.5, 2.0])

a = np.arange(2, 20, 2)

# built in methods
print(a.sum())
print(a.std())
print(a.cumsum())

# vectorized operations
l = [0, 0.5, 1.5, 3, 5]

print(2 * l)
print(a ** 2)

# universal functions
print(np.exp(a))
print(np.sqrt(a))

# multiple dimensions
b = np.array([a, a * 2])

# metainformation
print(b.size)
print(b.shape)

# reshaping
print(b.reshape((9, 2)))
print(b.T)

# resizing mutates and chops off items
print(np.resize(b, (2, 8)))

# flatten to 1D
print(b.flatten())

# boolean
print(b[b > 16])
print(np.where(b > 16, 1, 0))

# basic vectorization
np.random.seed(100)
r = np.arange(12).reshape((4, 3))
s = np.arange(12).reshape((4, 3)) * 0.5

# vectorized addition (no looping)
r + s

# broadcasting allows for combining objects of different shape within a single operation
r + 3
2 * r
#+end_src
